---
- name: Install necessary packages
  become: true
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present

- name: Add Docker GPG key
  become: true
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/debian/gpg
    state: present

- name: Debug read the pi_specs variable (from Raspberry Pi specs)
  ansible.builtin.debug:
    msg: "Pi specs: {{ pi_specs }}"

- name: Add Docker repository for arm64
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [arch=arm64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
    state: present
  # when: ansible_architecture == 'aarch64' and pi_model.nick == '5'
  # Cas du pi 4 et 5. On regarde nick tout simplement
  when: pi_specs.nick | int == 5 or pi_specs.nick | int == 4

- name: Add Docker repository for armhf
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [arch=armhf] https://download.docker.com/linux/raspbian {{ ansible_distribution_release }} stable"
    state: present
  # when: ansible_architecture == 'armv7l'
  # Cas du pi 2 et 3. On regarde nick tout simplement. A VERIFIER POUR DE VRAI
  when: pi_specs.nick == '3+' or pi_specs.nick == '3A+' or pi_specs.nick == '3' or pi_specs.nick == '2' or pi_specs.nick == '1' or pi_specs.nick == '0'

- name: Add Docker repository for armv6l
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [arch=armhf] https://download.docker.com/linux/raspbian {{ ansible_distribution_release }} stable"
    state: present
  # when: ansible_architecture == 'armv6l'
  when: pi_specs.nick == 'zero' or pi_specs.nick == 'zero W'

- name: Update apt cache
  become: true
  ansible.builtin.apt:
    update_cache: true

- name: Install Docker packages
  become: true
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present

- name: Ensure Docker service is started and enabled
  become: true
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true

- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ item.name }}"
    groups: docker
    append: true
  with_items:
    - "{{ users_admin }}"

- name: Create Docker group if it does not exist
  become: true
  ansible.builtin.group:
    name: docker
    state: present

- name: Add users to Docker group
  become: true
  ansible.builtin.user:
    name: "{{ item.name }}"
    groups: docker
    append: true
  loop: "{{ users_admin }}"
  loop_control:
    loop_var: item

- name: Enable Docker service to start on boot
  become: true
  ansible.builtin.systemd:
    name: docker
    enabled: true
    state: started

- name: Restart Docker service
  become: true
  ansible.builtin.systemd:
    name: docker
    state: restarted
